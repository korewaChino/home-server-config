---
version: "3"

services:

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    network_mode: "host"
    volumes:
      - /srv/nas/config/jellyfin/:/config
      - /srv/nas/storage/Media:/media
      - /srv/b2/Comics:/comics
    privileged: true
    devices:
      - /dev/video10:/dev/video10
      - /dev/video11:/dev/video11
      - /dev/video12:/dev/video12
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
      - /dev/dri/card1:/dev/dri/card1

    restart: "unless-stopped"

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /srv/nas/config/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    networks:
      - home

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /srv/nas/config/radarr:/config
      - /srv/nas/storage/Media/Movies:/movies #optional
      - /srv/nas/storage/Torrents/:/downloads #optional
    ports:
      - 7878:7878
    restart: unless-stopped
    networks:
      - home

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /srv/nas/config/lidarr:/config
      - /srv/nas/storage/Media/Music:/music #optional
      - /srv/nas/storage/Torrents:/downloads #optional
    ports:
      - 8686:8686
    restart: unless-stopped
    networks:
      - home

  transmission-tracker-add:
    network_mode: host
    environment:
      - "HOSTPORT=192.168.1.38:9091"
      - "TR_AUTH=transmission:${TRANSMISSION_PASSWORD}"
    container_name: transmission-tracker-add
    image: "andrewmhub/transmission-tracker-add:latest"
    restart: unless-stopped

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /srv/nas/config/sonarr:/config
      - /srv/nas/storage/Media/TV:/tv #optional
      - /srv/nas/storage/Torrents:/downloads #optional
    ports:
      - 8989:8989
    restart: unless-stopped
    networks:
      - home

  organizr:
    container_name: organizr
    volumes:
      - /srv/nas/config/organizr:/config
    environment:
      - PGID=1000
      - PUID=1000
      - fpm=false
      - branch=v2-master
    ports:
      - "8888:80"
    image: organizr/organizr
    restart: unless-stopped
    networks:
      - home

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    ports:
      - 3030:3000
    volumes:
      - /srv/nas/config/homepage:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock:ro # (optional) For docker integrations
    restart: unless-stopped
    networks:
      - home


  jfa-go:
    container_name: jfa-go
    ports:
      - "8056:8056"
    volumes:
      - /srv/nas/config/jfa-go:/data
      - /srv/nas/config/jellyfin:/jf
      - /etc/localtime:/etc/localtime:ro
    image: hrfee/jfa-go
    restart: unless-stopped
    depends_on:
      jellyfin:
        condition: service_healthy
    networks:
      - home

  grafana-agent:
    image: "grafana/agent:v0.27.1"
    container_name: grafana-agent
    privileged: true
    volumes:
      - "/srv/nas/grafana-agent:/etc/agent/data"
      - "/srv/nas/config/grafana-agent.yaml:/etc/agent/agent.yaml"
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log/:/var/hostlog/
    restart: unless-stopped
    networks:
      - home

  tanoshi:
    container_name: tanoshi
    ports:
      - "8005:80"
    volumes:
      - /srv/nas/config/tanoshi:/tanoshi
    restart: unless-stopped
    image: faldez/tanoshi
    networks:
      - home

  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    hostname: cappynas
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /src/nas/config/syncthing:/var/syncthing
    ports:
      - 8384:8384 # Web UI
      - 22000:22000/tcp # TCP file transfers
      - 22000:22000/udp # QUIC file transfers
      - 21027:21027/udp # Receive local discovery broadcasts
    restart: unless-stopped
    network_mode: host

  komga:
    image: gotson/komga
    container_name: komga
    volumes:
      - /srv/nas/config/komga:/config
      - /srv/b2/Comics:/data


    ports:
      - 8216:8080
    restart: unless-stopped
    networks:
      - home


  cloudflared:
    image: erisamoe/cloudflared
    container_name: cloudflared
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    restart: unless-stopped
    networks:
      - home
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    command: --http-api-update
    networks:
      - home
    environment:
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_HTTP_API_TOKEN=token
    ports:
      - 8090:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ombi:
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Bangkok
      - BASE_URL=/ombi #optional
    volumes:
      - /srv/nas/config/ombi:/config
    ports:
      - 3579:3579
    restart: unless-stopped
    networks:
      - home

  kaizoku:
    container_name: kaizoku
    image: ghcr.io/oae/kaizoku:latest
    environment:
      - DATABASE_URL=postgresql://kaizoku:kaizoku@kaizoku-db:5432/kaizoku
      - KAIZOKU_PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TZ=Asia/Bangkok
    volumes:
      - /srv/b2/Comics:/data
      - kaizoku-config:/config
      - kaizoku-logs:/logs
    depends_on:
      kaizoku-db:
        condition: service_healthy
    ports:
      - '3000:3000'
    restart: unless-stopped
    networks:
      - home

  redis:
    image: redis:7-alpine
    volumes:
      - redis:/data
    restart: unless-stopped
    networks:
      - home

  kaizoku-db:
    image: postgres:alpine
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U kaizoku' ]
      interval: 10s
      timeout: 20s
      retries: 5
    environment:
      - POSTGRES_USER=kaizoku
      - POSTGRES_DB=kaizoku
      - POSTGRES_PASSWORD=kaizoku
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - home

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    user: 0:0
    networks: 
      - home
    volumes:
      - /srv/nas/config/recyclarr:/config
    environment:
      - TZ=Asia/Bangkok
      - RECYCLARR_CREATE_CONFIG=true

volumes:
  netdatalib:
  netdatacache:
  mylar-config:
  mylar-downloads:
  kaizoku-config:
  kaizoku-logs:
  redis:
  db:
  fgc:
  b2:
    driver: local
    driver_opts:
      type: bind
      device: /srv/b2
     


networks:
  home:
    name: home
